name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm i

      - name: Verify lint rules
        run: npm run lint

  test-identity-service:
    needs: lint
    runs-on: ubuntu-latest

    env:
      SEOPOLIA_HTTPS_URL: "seopoloa_https_url"
      SEOPOLIA_WSS_URL: "seopoloa_wss_url"
      JWT_ACCESS_SECRET: "test_secret"
      JWT_ACCESS_EXPIRES_IN: "15m"
      JWT_REFRESH_SECRET: "test_secret2"
      JWT_REFRESH_EXPIRES_IN: "7d"
      MONGO_URI: "mongo_uri"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm i

      - name: Run identity service tests
        run:  npm exec nx test identity-service

  test-blockchain-service:
    needs: lint # 
    runs-on: ubuntu-latest

    env:
      SEOPOLIA_HTTPS_URL: "seopoloa_https_url"
      SEOPOLIA_WSS_URL: "seopoloa_wss_url"
      JWT_ACCESS_SECRET: "test_secret"
      JWT_ACCESS_EXPIRES_IN: "15m"
      JWT_REFRESH_SECRET: "test_secret2"
      JWT_REFRESH_EXPIRES_IN: "7d"
      MONGO_URI: "mongo_uri"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm i

      - name: Run blockchain service tests
        run:  npm exec nx test blockchain-service

  build-and-push-blockchain-service:
    needs: [test-identity-service, test-blockchain-service]
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Step to extract the version from package.json
      - name: Extract package version
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Set Docker image name variables
        id: string-utils
        run: |
          echo "owner_lc=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      # Step to log in to the container registry (e.g., GHCR)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.WORKFLOW_TOKEN }}

      # Step to build and tag the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/blockchain-service/Dockerfile
          push: true # Push the image after building
          tags: |
            ghcr.io/${{ steps.string-utils.outputs.owner_lc }}/blockchain-auth-blockchain-service:${{ steps.package-version.outputs.version }}
            ghcr.io/${{ steps.string-utils.outputs.owner_lc }}/blockchain-auth-blockchain-service:latest
